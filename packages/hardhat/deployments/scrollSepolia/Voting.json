{
  "address": "0x3a488ADBc680199545Eadc72F77BA2B5C718fC71",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "governance",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proposalIpfsHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOfVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Voting.SITUATION",
          "name": "situation",
          "type": "uint8"
        }
      ],
      "name": "ProposalMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governance",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "descriptionIpfsHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votingTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commentTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "percentageOfAgreement",
          "type": "uint256"
        }
      ],
      "name": "ProtocolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Voting.OPTION",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "name": "VotedForProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Voting.SITUATION",
          "name": "situation",
          "type": "uint8"
        }
      ],
      "name": "VotesSettled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_descriptionIpfsHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_votingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_commentTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percentageOfAgreement",
          "type": "uint256"
        }
      ],
      "name": "addProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentProtocol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "makeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "protocolAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "proposal",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOfVotes",
          "type": "uint256"
        },
        {
          "internalType": "enum Voting.SITUATION",
          "name": "situation",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "protocols",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "descriptionIpfsHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "votingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "commentTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percentageOfAgreement",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        }
      ],
      "name": "settleVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "enum Voting.OPTION",
          "name": "_vote",
          "type": "uint8"
        }
      ],
      "name": "voteForProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "internalType": "enum Voting.OPTION",
          "name": "vote",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb41f7f4d1ac17d5d15247f0e604bb135dc36904f45a29db525e72c2bf2252ae",
  "receipt": {
    "to": null,
    "from": "0xBFdCe272F252E785710297F55586aB20e2D3F6Dc",
    "contractAddress": "0x3a488ADBc680199545Eadc72F77BA2B5C718fC71",
    "transactionIndex": 0,
    "gasUsed": "1077529",
    "logsBloom": "0x
    "blockHash": "0x0b4a90caff3135eaa5ea4e711a5163da7a75098951ea37e4f4275589cb5206a6",
    "transactionHash": "0xdb41f7f4d1ac17d5d15247f0e604bb135dc36904f45a29db525e72c2bf2252ae",
    "logs": [],
    "blockNumber": 3392215,
    "cumulativeGasUsed": "1077529",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ae52def522b8e04051199de58ba8c38f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposalIpfsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Voting.SITUATION\",\"name\":\"situation\",\"type\":\"uint8\"}],\"name\":\"ProposalMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"descriptionIpfsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commentTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentageOfAgreement\",\"type\":\"uint256\"}],\"name\":\"ProtocolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Voting.OPTION\",\"name\":\"vote\",\"type\":\"uint8\"}],\"name\":\"VotedForProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Voting.SITUATION\",\"name\":\"situation\",\"type\":\"uint8\"}],\"name\":\"VotesSettled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_descriptionIpfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_votingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentageOfAgreement\",\"type\":\"uint256\"}],\"name\":\"addProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"makeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"proposal\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfVotes\",\"type\":\"uint256\"},{\"internalType\":\"enum Voting.SITUATION\",\"name\":\"situation\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocols\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"descriptionIpfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"votingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageOfAgreement\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"settleVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"enum Voting.OPTION\",\"name\":\"_vote\",\"type\":\"uint8\"}],\"name\":\"voteForProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"enum Voting.OPTION\",\"name\":\"vote\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voting.sol\":\"Voting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Voting {\\n    uint256 public currentProtocol;\\n    mapping(address => Protocol) public protocols;\\n    mapping(uint256 => Proposal) public proposals; // (proposalId => Proposal)\\n    mapping(uint256 => Vote[]) public votes; // (proposalId => Vote[])\\n    mapping(uint256 => mapping(address => bool)) public voted; // (proposalId => userAddress => bool\\n\\n    event ProtocolAdded(\\n        address indexed governance,\\n        address indexed owner,\\n        string descriptionIpfsHash,\\n        uint256 votingTime,\\n        uint256 commentTime,\\n        uint256 percentageOfAgreement\\n    );\\n\\n    event ProposalMade(\\n        uint256 indexed proposalId,\\n        address indexed governance,\\n        string title,\\n        string proposalIpfsHash,\\n        uint256 startTime,\\n        uint256 amountOfVotes,\\n        SITUATION situation\\n    );\\n\\n    event VotedForProposal(\\n        uint256 indexed proposalId,\\n        address indexed voter,\\n        OPTION vote\\n    );\\n\\n    event VotesSettled(\\n        uint256 indexed proposalId,\\n        SITUATION situation\\n    );\\n\\n    enum SITUATION{\\n        VOTING, \\n        ACCEPTED,\\n        UNACCPETED\\n    }\\n\\n    enum OPTION{\\n        AGREE,\\n        ABSTAIN,\\n        DISAGREE\\n    }\\n    \\n    struct Protocol {\\n        address owner;\\n        string descriptionIpfsHash;\\n        uint256 votingTime;\\n        uint256 commentTime;\\n        uint256 percentageOfAgreement;\\n    }\\n\\n    struct Proposal {\\n        uint256 id; // used to find the voters\\n        address protocolAddress;\\n        string title;\\n        string proposal;\\n        uint256 startTime;\\n        uint256 amountOfVotes;\\n        SITUATION situation;\\n    }\\n\\n    struct Vote {\\n        address voter;\\n        OPTION vote;\\n    }\\n\\n    constructor() {\\n        currentProtocol = 0;\\n    }\\n\\n    function addProtocol(\\n        address _governance,\\n        address _owner,\\n        string memory _descriptionIpfsHash,\\n        uint256 _votingTime,\\n        uint256 _commentTime,\\n        uint256 _percentageOfAgreement\\n    ) external alreadyExists(_governance){\\n        protocols[_governance] = Protocol(\\n            _owner,\\n            _descriptionIpfsHash,\\n            _votingTime,\\n            _commentTime,\\n            _percentageOfAgreement\\n        );\\n\\n        emit ProtocolAdded(\\n            _governance,\\n            _owner,\\n            _descriptionIpfsHash,\\n            _votingTime,\\n            _commentTime,\\n            _percentageOfAgreement\\n        );\\n    }\\n\\n    function makeProposal(\\n        address _governance,\\n        uint256 _id,\\n        string memory _title,\\n        string memory _description\\n    ) external idNotUsed(_id) {\\n        proposals[_id] = Proposal(\\n            _id,\\n            _governance,\\n            _title,\\n            _description,\\n            block.timestamp,\\n            0,\\n            SITUATION.VOTING\\n        );\\n\\n        emit ProposalMade(\\n            _id,\\n            _governance,\\n            _title,\\n            _description,\\n            block.timestamp,\\n            0,\\n            SITUATION.VOTING\\n        );\\n    }\\n    \\n    function voteForProposal(\\n        uint256 _proposalId,\\n        OPTION _vote\\n    ) external hasNotVoted(_proposalId) {\\n        Proposal storage proposal = proposals[_proposalId];\\n        Protocol storage protocol = protocols[proposal.protocolAddress];\\n\\n        require(_vote == OPTION.AGREE || _vote == OPTION.ABSTAIN || _vote == OPTION.DISAGREE, \\\"Invalid vote\\\");\\n        require(proposal.startTime + protocol.votingTime >= block.timestamp, \\\"Time ended\\\");\\n\\n        votes[_proposalId].push(\\n            Vote(\\n                msg.sender,\\n                _vote\\n            )\\n        );\\n        voted[_proposalId][msg.sender] = true;\\n\\n        emit VotedForProposal(\\n            _proposalId,\\n            msg.sender,\\n            _vote\\n        );\\n    }\\n\\n    function settleVotes(\\n        uint256 _proposalId\\n    ) external {\\n        require(\\n            proposals[_proposalId].situation == SITUATION.VOTING &&\\n            block.timestamp >= proposals[_proposalId].startTime + protocols[proposals[_proposalId].protocolAddress].votingTime,\\n            \\\"Voting not ended\\\"\\n        );\\n        Proposal storage proposal = proposals[_proposalId];\\n        Protocol storage protocol = protocols[proposal.protocolAddress];\\n        uint256 agree = 0;\\n        uint256 disagree = 0;\\n\\n        for (uint256 i = 0; i < votes[_proposalId].length; i++) {\\n            Vote storage vote = votes[_proposalId][i];\\n\\n            uint256 voterBalance = IERC20(proposal.protocolAddress).balanceOf(vote.voter);\\n\\n            if (vote.vote == OPTION.AGREE) {\\n                agree += voterBalance;\\n            } else if (vote.vote == OPTION.DISAGREE) {\\n                disagree += voterBalance;\\n            }\\n        }\\n\\n        if(agree * 1e18 / (agree + disagree) >= protocol.percentageOfAgreement) {\\n            proposal.situation = SITUATION.ACCEPTED;\\n        } else {\\n            proposal.situation = SITUATION.UNACCPETED;\\n        }\\n\\n        emit VotesSettled(\\n            _proposalId,\\n            proposal.situation\\n        );\\n    }\\n\\n    modifier hasNotVoted(uint256 _proposalId) {\\n        require(!voted[_proposalId][msg.sender], \\\"Already voted\\\");\\n        _;\\n    }\\n    \\n    modifier alreadyExists(address _governance) {\\n        require(protocols[_governance].owner == address(0), \\\"Already exists\\\");\\n        _;\\n    }\\n\\n    modifier idNotUsed(uint256 _id) {\\n        require(proposals[_id].protocolAddress == address(0), \\\"Id already used\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x18a1f3996f2083941d9ea08438f28a317dacfb009236a1af6fde94cffde8a4ff\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506000805561127c806100246000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806351e193661161006657806351e19366146101135780635277b4ae1461012a57806383b2244114610168578063bd1263121461017b578063c6e36a321461018e57600080fd5b8063013cf08b14610098578063206e4123146100c757806323835a3f146100dc57806326638a0a146100ef575b600080fd5b6100ab6100a6366004610c00565b6101af565b6040516100be9796959493929190610c96565b60405180910390f35b6100da6100d5366004610c00565b61030a565b005b6100da6100ea366004610dbb565b6105bc565b6101026100fd366004610e39565b61075a565b6040516100be959493929190610e5b565b61011c60005481565b6040519081526020016100be565b610158610138366004610e9c565b600460209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100be565b6100da610176366004610ec8565b61081c565b6100da610189366004610efc565b610a77565b6101a161019c366004610f76565b610bbd565b6040516100be929190610f98565b600260208190526000918252604090912080546001820154928201805491936001600160a01b031692916101e290610fbe565b80601f016020809104026020016040519081016040528092919081815260200182805461020e90610fbe565b801561025b5780601f106102305761010080835404028352916020019161025b565b820191906000526020600020905b81548152906001019060200180831161023e57829003601f168201915b50505050509080600301805461027090610fbe565b80601f016020809104026020016040519081016040528092919081815260200182805461029c90610fbe565b80156102e95780601f106102be576101008083540402835291602001916102e9565b820191906000526020600020905b8154815290600101906020018083116102cc57829003601f168201915b50505050600483015460058401546006909401549293909290915060ff1687565b600081815260026020819052604082206006015460ff169081111561033157610331610c5f565b14801561037c575060008181526002602081815260408084206001818101546001600160a01b0316865283529084208301549385905291905260040154610378919061100e565b4210155b6103c05760405162461bcd60e51b815260206004820152601060248201526f159bdd1a5b99c81b9bdd08195b99195960821b60448201526064015b60405180910390fd5b60008181526002602090815260408083206001808201546001600160a01b031685529092528220909180805b60008681526003602052604090205481101561051f57600086815260036020526040812080548390811061042257610422611027565b6000918252602082206001890154910180546040516370a0823160e01b81526001600160a01b039182166004820152919450909116906370a0823190602401602060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a2919061103d565b905060008254600160a01b900460ff1660028111156104c3576104c3610c5f565b036104d9576104d2818661100e565b945061050a565b60028254600160a01b900460ff1660028111156104f8576104f8610c5f565b0361050a57610507818561100e565b93505b5050808061051790611056565b9150506103ec565b50600483015461052f828461100e565b61054184670de0b6b3a764000061106f565b61054b9190611086565b106105645760068401805460ff19166001179055610574565b60068401805460ff191660021790555b600684015460405186917f6816c9d2a12cbc0ba7ee335e2e0786569a67a7377501ecb0e2fa80fcc569670d916105ad9160ff16906110a8565b60405180910390a25050505050565b60008381526002602052604090206001015483906001600160a01b0316156106185760405162461bcd60e51b815260206004820152600f60248201526e125908185b1c9958591e481d5cd959608a1b60448201526064016103b7565b6040518060e00160405280858152602001866001600160a01b03168152602001848152602001838152602001428152602001600081526020016000600281111561066457610664610c5f565b905260008581526002602081815260409283902084518155908401516001820180546001600160a01b0319166001600160a01b0390921691909117905591830151908201906106b3908261110a565b50606082015160038201906106c8908261110a565b506080820151600482015560a0820151600582015560c082015160068201805460ff1916600183600281111561070057610700610c5f565b0217905550905050846001600160a01b0316847f36fb31d64cc93ead287380dc8324a7751b0b08ac98d233876272653c9af06da185854260008060405161074b9594939291906111ca565b60405180910390a35050505050565b6001602081905260009182526040909120805491810180546001600160a01b039093169261078790610fbe565b80601f01602080910402602001604051908101604052809291908181526020018280546107b390610fbe565b80156108005780601f106107d557610100808354040283529160200191610800565b820191906000526020600020905b8154815290600101906020018083116107e357829003601f168201915b5050505050908060020154908060030154908060040154905085565b6000828152600460209081526040808320338452909152902054829060ff16156108785760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b60448201526064016103b7565b60008381526002602090815260408083206001808201546001600160a01b03168552909252822090918460028111156108b3576108b3610c5f565b14806108d0575060018460028111156108ce576108ce610c5f565b145b806108ec575060028460028111156108ea576108ea610c5f565b145b6109275760405162461bcd60e51b815260206004820152600c60248201526b496e76616c696420766f746560a01b60448201526064016103b7565b428160020154836004015461093c919061100e565b10156109775760405162461bcd60e51b815260206004820152600a602482015269151a5b5948195b99195960b21b60448201526064016103b7565b600360008681526020019081526020016000206040518060400160405280336001600160a01b031681526020018660028111156109b6576109b6610c5f565b9052815460018101835560009283526020928390208251910180546001600160a01b031981166001600160a01b03909316928317825593830151929390929183916001600160a81b03191617600160a01b836002811115610a1957610a19610c5f565b02179055505050600085815260046020908152604080832033808552925291829020805460ff19166001179055905186907f1a5a98bedb74e24d5201376f066be0fb9fddbb3837ddbae32a07846519a7461b9061074b9088906110a8565b6001600160a01b0380871660009081526001602052604090205487911615610ad25760405162461bcd60e51b815260206004820152600e60248201526d416c72656164792065786973747360901b60448201526064016103b7565b6040805160a0810182526001600160a01b038881168252602080830189815283850189905260608401889052608084018790528b8316600090815260019283905294909420835181546001600160a01b031916931692909217825592519192909190820190610b41908261110a565b50604082015181600201556060820151816003015560808201518160040155905050856001600160a01b0316876001600160a01b03167fa3607b96757d4c561fbb23eb51d589e1665ddbaa4da9dc50806449d55266cebd87878787604051610bac9493929190611217565b60405180910390a350505050505050565b60036020528160005260406000208181548110610bd957600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b900460ff16905082565b600060208284031215610c1257600080fd5b5035919050565b6000815180845260005b81811015610c3f57602081850181015186830182015201610c23565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b60038110610c9357634e487b7160e01b600052602160045260246000fd5b50565b8781526001600160a01b038716602082015260e060408201819052600090610cc090830188610c19565b8281036060840152610cd28188610c19565b9150508460808301528360a0830152610cea83610c75565b8260c083015298975050505050505050565b80356001600160a01b0381168114610d1357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d3f57600080fd5b813567ffffffffffffffff80821115610d5a57610d5a610d18565b604051601f8301601f19908116603f01168101908282118183101715610d8257610d82610d18565b81604052838152866020858801011115610d9b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610dd157600080fd5b610dda85610cfc565b935060208501359250604085013567ffffffffffffffff80821115610dfe57600080fd5b610e0a88838901610d2e565b93506060870135915080821115610e2057600080fd5b50610e2d87828801610d2e565b91505092959194509250565b600060208284031215610e4b57600080fd5b610e5482610cfc565b9392505050565b6001600160a01b038616815260a060208201819052600090610e7f90830187610c19565b604083019590955250606081019290925260809091015292915050565b60008060408385031215610eaf57600080fd5b82359150610ebf60208401610cfc565b90509250929050565b60008060408385031215610edb57600080fd5b82359150602083013560038110610ef157600080fd5b809150509250929050565b60008060008060008060c08789031215610f1557600080fd5b610f1e87610cfc565b9550610f2c60208801610cfc565b9450604087013567ffffffffffffffff811115610f4857600080fd5b610f5489828a01610d2e565b945050606087013592506080870135915060a087013590509295509295509295565b60008060408385031215610f8957600080fd5b50508035926020909101359150565b6001600160a01b038316815260408101610fb183610c75565b8260208301529392505050565b600181811c90821680610fd257607f821691505b602082108103610ff257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561102157611021610ff8565b92915050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561104f57600080fd5b5051919050565b60006001820161106857611068610ff8565b5060010190565b808202811582820484141761102157611021610ff8565b6000826110a357634e487b7160e01b600052601260045260246000fd5b500490565b602081016110b583610c75565b91905290565b601f82111561110557600081815260208120601f850160051c810160208610156110e25750805b601f850160051c820191505b81811015611101578281556001016110ee565b5050505b505050565b815167ffffffffffffffff81111561112457611124610d18565b611138816111328454610fbe565b846110bb565b602080601f83116001811461116d57600084156111555750858301515b600019600386901b1c1916600185901b178555611101565b600085815260208120601f198616915b8281101561119c5788860151825594840194600190910190840161117d565b50858210156111ba5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60a0815260006111dd60a0830188610c19565b82810360208401526111ef8188610c19565b91505084604083015283606083015261120783610c75565b8260808301529695505050505050565b60808152600061122a6080830187610c19565b602083019590955250604081019290925260609091015291905056fea26469706673582212205628a3ccaebbe6495967178558585f31dd349848641a5b9882eba4227d05e5c664736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806351e193661161006657806351e19366146101135780635277b4ae1461012a57806383b2244114610168578063bd1263121461017b578063c6e36a321461018e57600080fd5b8063013cf08b14610098578063206e4123146100c757806323835a3f146100dc57806326638a0a146100ef575b600080fd5b6100ab6100a6366004610c00565b6101af565b6040516100be9796959493929190610c96565b60405180910390f35b6100da6100d5366004610c00565b61030a565b005b6100da6100ea366004610dbb565b6105bc565b6101026100fd366004610e39565b61075a565b6040516100be959493929190610e5b565b61011c60005481565b6040519081526020016100be565b610158610138366004610e9c565b600460209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100be565b6100da610176366004610ec8565b61081c565b6100da610189366004610efc565b610a77565b6101a161019c366004610f76565b610bbd565b6040516100be929190610f98565b600260208190526000918252604090912080546001820154928201805491936001600160a01b031692916101e290610fbe565b80601f016020809104026020016040519081016040528092919081815260200182805461020e90610fbe565b801561025b5780601f106102305761010080835404028352916020019161025b565b820191906000526020600020905b81548152906001019060200180831161023e57829003601f168201915b50505050509080600301805461027090610fbe565b80601f016020809104026020016040519081016040528092919081815260200182805461029c90610fbe565b80156102e95780601f106102be576101008083540402835291602001916102e9565b820191906000526020600020905b8154815290600101906020018083116102cc57829003601f168201915b50505050600483015460058401546006909401549293909290915060ff1687565b600081815260026020819052604082206006015460ff169081111561033157610331610c5f565b14801561037c575060008181526002602081815260408084206001818101546001600160a01b0316865283529084208301549385905291905260040154610378919061100e565b4210155b6103c05760405162461bcd60e51b815260206004820152601060248201526f159bdd1a5b99c81b9bdd08195b99195960821b60448201526064015b60405180910390fd5b60008181526002602090815260408083206001808201546001600160a01b031685529092528220909180805b60008681526003602052604090205481101561051f57600086815260036020526040812080548390811061042257610422611027565b6000918252602082206001890154910180546040516370a0823160e01b81526001600160a01b039182166004820152919450909116906370a0823190602401602060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a2919061103d565b905060008254600160a01b900460ff1660028111156104c3576104c3610c5f565b036104d9576104d2818661100e565b945061050a565b60028254600160a01b900460ff1660028111156104f8576104f8610c5f565b0361050a57610507818561100e565b93505b5050808061051790611056565b9150506103ec565b50600483015461052f828461100e565b61054184670de0b6b3a764000061106f565b61054b9190611086565b106105645760068401805460ff19166001179055610574565b60068401805460ff191660021790555b600684015460405186917f6816c9d2a12cbc0ba7ee335e2e0786569a67a7377501ecb0e2fa80fcc569670d916105ad9160ff16906110a8565b60405180910390a25050505050565b60008381526002602052604090206001015483906001600160a01b0316156106185760405162461bcd60e51b815260206004820152600f60248201526e125908185b1c9958591e481d5cd959608a1b60448201526064016103b7565b6040518060e00160405280858152602001866001600160a01b03168152602001848152602001838152602001428152602001600081526020016000600281111561066457610664610c5f565b905260008581526002602081815260409283902084518155908401516001820180546001600160a01b0319166001600160a01b0390921691909117905591830151908201906106b3908261110a565b50606082015160038201906106c8908261110a565b506080820151600482015560a0820151600582015560c082015160068201805460ff1916600183600281111561070057610700610c5f565b0217905550905050846001600160a01b0316847f36fb31d64cc93ead287380dc8324a7751b0b08ac98d233876272653c9af06da185854260008060405161074b9594939291906111ca565b60405180910390a35050505050565b6001602081905260009182526040909120805491810180546001600160a01b039093169261078790610fbe565b80601f01602080910402602001604051908101604052809291908181526020018280546107b390610fbe565b80156108005780601f106107d557610100808354040283529160200191610800565b820191906000526020600020905b8154815290600101906020018083116107e357829003601f168201915b5050505050908060020154908060030154908060040154905085565b6000828152600460209081526040808320338452909152902054829060ff16156108785760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b60448201526064016103b7565b60008381526002602090815260408083206001808201546001600160a01b03168552909252822090918460028111156108b3576108b3610c5f565b14806108d0575060018460028111156108ce576108ce610c5f565b145b806108ec575060028460028111156108ea576108ea610c5f565b145b6109275760405162461bcd60e51b815260206004820152600c60248201526b496e76616c696420766f746560a01b60448201526064016103b7565b428160020154836004015461093c919061100e565b10156109775760405162461bcd60e51b815260206004820152600a602482015269151a5b5948195b99195960b21b60448201526064016103b7565b600360008681526020019081526020016000206040518060400160405280336001600160a01b031681526020018660028111156109b6576109b6610c5f565b9052815460018101835560009283526020928390208251910180546001600160a01b031981166001600160a01b03909316928317825593830151929390929183916001600160a81b03191617600160a01b836002811115610a1957610a19610c5f565b02179055505050600085815260046020908152604080832033808552925291829020805460ff19166001179055905186907f1a5a98bedb74e24d5201376f066be0fb9fddbb3837ddbae32a07846519a7461b9061074b9088906110a8565b6001600160a01b0380871660009081526001602052604090205487911615610ad25760405162461bcd60e51b815260206004820152600e60248201526d416c72656164792065786973747360901b60448201526064016103b7565b6040805160a0810182526001600160a01b038881168252602080830189815283850189905260608401889052608084018790528b8316600090815260019283905294909420835181546001600160a01b031916931692909217825592519192909190820190610b41908261110a565b50604082015181600201556060820151816003015560808201518160040155905050856001600160a01b0316876001600160a01b03167fa3607b96757d4c561fbb23eb51d589e1665ddbaa4da9dc50806449d55266cebd87878787604051610bac9493929190611217565b60405180910390a350505050505050565b60036020528160005260406000208181548110610bd957600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b900460ff16905082565b600060208284031215610c1257600080fd5b5035919050565b6000815180845260005b81811015610c3f57602081850181015186830182015201610c23565b506000602082860101526020601f19601f83011685010191505092915050565b634e487b7160e01b600052602160045260246000fd5b60038110610c9357634e487b7160e01b600052602160045260246000fd5b50565b8781526001600160a01b038716602082015260e060408201819052600090610cc090830188610c19565b8281036060840152610cd28188610c19565b9150508460808301528360a0830152610cea83610c75565b8260c083015298975050505050505050565b80356001600160a01b0381168114610d1357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d3f57600080fd5b813567ffffffffffffffff80821115610d5a57610d5a610d18565b604051601f8301601f19908116603f01168101908282118183101715610d8257610d82610d18565b81604052838152866020858801011115610d9b57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610dd157600080fd5b610dda85610cfc565b935060208501359250604085013567ffffffffffffffff80821115610dfe57600080fd5b610e0a88838901610d2e565b93506060870135915080821115610e2057600080fd5b50610e2d87828801610d2e565b91505092959194509250565b600060208284031215610e4b57600080fd5b610e5482610cfc565b9392505050565b6001600160a01b038616815260a060208201819052600090610e7f90830187610c19565b604083019590955250606081019290925260809091015292915050565b60008060408385031215610eaf57600080fd5b82359150610ebf60208401610cfc565b90509250929050565b60008060408385031215610edb57600080fd5b82359150602083013560038110610ef157600080fd5b809150509250929050565b60008060008060008060c08789031215610f1557600080fd5b610f1e87610cfc565b9550610f2c60208801610cfc565b9450604087013567ffffffffffffffff811115610f4857600080fd5b610f5489828a01610d2e565b945050606087013592506080870135915060a087013590509295509295509295565b60008060408385031215610f8957600080fd5b50508035926020909101359150565b6001600160a01b038316815260408101610fb183610c75565b8260208301529392505050565b600181811c90821680610fd257607f821691505b602082108103610ff257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561102157611021610ff8565b92915050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561104f57600080fd5b5051919050565b60006001820161106857611068610ff8565b5060010190565b808202811582820484141761102157611021610ff8565b6000826110a357634e487b7160e01b600052601260045260246000fd5b500490565b602081016110b583610c75565b91905290565b601f82111561110557600081815260208120601f850160051c810160208610156110e25750805b601f850160051c820191505b81811015611101578281556001016110ee565b5050505b505050565b815167ffffffffffffffff81111561112457611124610d18565b611138816111328454610fbe565b846110bb565b602080601f83116001811461116d57600084156111555750858301515b600019600386901b1c1916600185901b178555611101565b600085815260208120601f198616915b8281101561119c5788860151825594840194600190910190840161117d565b50858210156111ba5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60a0815260006111dd60a0830188610c19565b82810360208401526111ef8188610c19565b91505084604083015283606083015261120783610c75565b8260808301529695505050505050565b60808152600061122a6080830187610c19565b602083019590955250604081019290925260609091015291905056fea26469706673582212205628a3ccaebbe6495967178558585f31dd349848641a5b9882eba4227d05e5c664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 82,
        "contract": "contracts/Voting.sol:Voting",
        "label": "currentProtocol",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 87,
        "contract": "contracts/Voting.sol:Voting",
        "label": "protocols",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Protocol)170_storage)"
      },
      {
        "astId": 92,
        "contract": "contracts/Voting.sol:Voting",
        "label": "proposals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Proposal)186_storage)"
      },
      {
        "astId": 98,
        "contract": "contracts/Voting.sol:Voting",
        "label": "votes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_array(t_struct(Vote)192_storage)dyn_storage)"
      },
      {
        "astId": 104,
        "contract": "contracts/Voting.sol:Voting",
        "label": "voted",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Vote)192_storage)dyn_storage": {
        "base": "t_struct(Vote)192_storage",
        "encoding": "dynamic_array",
        "label": "struct Voting.Vote[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(OPTION)159": {
        "encoding": "inplace",
        "label": "enum Voting.OPTION",
        "numberOfBytes": "1"
      },
      "t_enum(SITUATION)155": {
        "encoding": "inplace",
        "label": "enum Voting.SITUATION",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Protocol)170_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Voting.Protocol)",
        "numberOfBytes": "32",
        "value": "t_struct(Protocol)170_storage"
      },
      "t_mapping(t_uint256,t_array(t_struct(Vote)192_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Voting.Vote[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Vote)192_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Proposal)186_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Voting.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)186_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)186_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Proposal",
        "members": [
          {
            "astId": 172,
            "contract": "contracts/Voting.sol:Voting",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 174,
            "contract": "contracts/Voting.sol:Voting",
            "label": "protocolAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 176,
            "contract": "contracts/Voting.sol:Voting",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 178,
            "contract": "contracts/Voting.sol:Voting",
            "label": "proposal",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 180,
            "contract": "contracts/Voting.sol:Voting",
            "label": "startTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 182,
            "contract": "contracts/Voting.sol:Voting",
            "label": "amountOfVotes",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 185,
            "contract": "contracts/Voting.sol:Voting",
            "label": "situation",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(SITUATION)155"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Protocol)170_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Protocol",
        "members": [
          {
            "astId": 161,
            "contract": "contracts/Voting.sol:Voting",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 163,
            "contract": "contracts/Voting.sol:Voting",
            "label": "descriptionIpfsHash",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 165,
            "contract": "contracts/Voting.sol:Voting",
            "label": "votingTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 167,
            "contract": "contracts/Voting.sol:Voting",
            "label": "commentTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 169,
            "contract": "contracts/Voting.sol:Voting",
            "label": "percentageOfAgreement",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Vote)192_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Vote",
        "members": [
          {
            "astId": 188,
            "contract": "contracts/Voting.sol:Voting",
            "label": "voter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 191,
            "contract": "contracts/Voting.sol:Voting",
            "label": "vote",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(OPTION)159"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}